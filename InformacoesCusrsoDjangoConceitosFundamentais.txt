Retornando um template - 2:55

* Template - 
OBS: por padrão o Django espera que você já tenha uma pasta com o nome template na sua app e dentro da pasta template uma nova pasta com o nome da app

* O que é uma View?
é uma página que irá refletir uma ação que o usuário deseja executar
OBS: ao criar uma view deve ser posta a rota no doc urls.py e a ação que a view irá executar dentro do doc views.py dentro da app
EX url.py:

from django.contrib import admin
from django.urls import path
from django.contrib import admin
from django.urls import path
from contas.views import home

urlpatterns = [
    path('admin/', admin.site.urls),
    path('contas/',home)
]

EX views.py

from django.shortcuts import render

from django.http import HttpResponse
import datetime

def home(request):
    now = datetime.datetime.now()
    html = "<html><body>It is now %s.</body></html>" %now
    return HttpResponse(html)


* Comandos para a aplicação:
Iniciar servidor: python manage.py runserver
endereço da aplicação: http://127.0.0.1:8000/
parar a aplicação: ctrl+C
Criar um super user: python manage.py createsuperuser
criar as estruturas principais de um html automaticamente: html:5 + tab

* Como adicionar o banco de dados :
comando: python manage.py migrate

* Como registrar uma app no settings:
abra o arquivo settings.py no projeto principal;
na parte de INSTALLED_APPS e adicione o nome da app;
EX: 'contas',

* Comando para criar uma app:
python manage.py startapp contas
OBS: ao criar uma app ela deve ser registrada no settings


* iniciar o Pycharm:
./pycharm.sh

* Registrar a app no settings:
'nome_da_app',

* Cria uma app no Django. Ex: criou a app contas  :
python manage.py startapp contas

* Estrutura de pastas iniciais no Django:
- init - pacote python
- settings - settup do projeto com alguns elementos importantes que serão listados - 
BASE_DIR: variavel que guarda o caminho de onde esta seu projeto no SO
SECRET_KEY: string para criptografar dados do usuario
DEBUG = True: mantem a variavel debug true quando estamos em desenvolvimento para
coletar logs, detalhes, quando o projeto é colocado em produção deve ficar false.
ALLOWED_HOSTS = []: variavel que recebe a lista de dominios que sua aplicação funcione.
INSTALLED_APPS: lista de aplicações instaladas e todas aplicações futuras criadas
MIDDLEWARE: outras ações que o django já faz por nós ex: autenticação, segurança...
ROOT_URLCONF: guarda as urls 
TEMPLATES: guarda os templates
WSGI_APPLICATION: mapeamento de wsgi
DATABASES: configurações de banco de dados, já vem com o sqlite3
ADMIN_PASSWORD_VALIDATIONS: já vem com algumas configurações de password
LANGUAGE_CODE: alteração de idioma
TIME_ZONE: alteração de time zone


* Configurando o Django em um projeto no PyCharm 
- Criar um novo projeto no PyCharm chamado de "meuProjeto"
- Abrir o terminal e digitar pwd para saber se esta na pasta raiz do projeto
- Criar uma virtual env para o projeto com o comando:
python3 -m venv venv
- Ativar venv com o comando:
source venv/bin/activate  (Linux ou Mac)
venv/Scripts/activate  (Windows)
- Instalar o Django:
pip install django
- Criar um projeto no Django:
django-admin startproject controle_gastos 
ou django-admin startproject controle_gastos .
OBS: o ponto no final indica que a criação do projeto será no diretorio atual e 
não em uma subpasta

- Criar o primeiro projeto Django: ( 4:09 )

* Ambiente Windows:
- Python - OK
- PyCharm - OK
- Virtual Env - OK
Para criar uma virtual Env é necessário criar uma pasta para que no futuro se necessário possa existir vários 
projetos com diferentes versões do Django.

#Cria uma pasta e entra nessa pasta:
mkdir projTeste
cd projTeste

#Cria um ambiente virtual, para que o Django não afete o SO
python -m venv venv

#Ativa a venv
cd venv
cd Scripts
activate

#Instalar o Djangocd ..
cd ..
pip install django

* Django - é um framework web baseado em python, cria diversas ferramentas para fazer ações comuns em um sistema 
como forms, rotas e etc.

Curso Django 2.0 - Aprendendo os conceitos fundamentais

* Preparação do ambiente:
- Instalar o git - OK
- Fazer Clone do projeto - OK
- Criar um token para que o github funcione do novo notebook:
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 - OK
- Instalar o python - OK
- Instalar o pip - Ok
- Instalar o Django - OK
- Instalar o PyCharm - OK
Comando para iniciar o PyCharm: ./pycharm.sh

video: preparacao ambiente Linux 07:42

